#!/bin/sh

#TODO add support for service_path paramater

#Example:
#kong_install_service_and_route http://kong:8001 portainer http portainer 9000 "" https /portainer

KONG_URL=${1}
SERVICE_NAME=${2}
SERVICE_PROTOCOL=${3}
SERVICE_HOST=${4}
SERVICE_PORT=${5}
SERVICE_PATH=${6}
ROUTE_PROTOCOL=${7}
ROUTE_HOSTS=${8}
ROUTE_PATHS=${9}
ROUTE_METHODS=${10}
ROUTE_STRIP_PATH=${11}
ROUTE_PRESERVE_HOST=${12}

echo "Installing service for ${2}"

if [ $# -ne 9 ]; then
  echo "Invalid paramaters expecting 12 but $# were supplied"
  exit 1
fi

if [ "E${ROUTE_PATHS}" = "E" ]; then
  echo "Invalid paramaters"
  exit 1
fi

SERVICE_JSON=$(curl -sS --fail -X GET --url ${KONG_URL}/services/${SERVICE_NAME} 2>&1)
RET=$?
SERVICE_EXISTS_IN_KONG=1
if [ ${RET} -ne 0 ]; then
  SERVICE_EXISTS_IN_KONG=0
  echo "Service not found in kong"
  echo "Output: ${SERVICE_JSON}"
  echo ""
  TMP=$(echo ${SERVICE_JSON} | grep 'Connection refused' )
  if [ "E${TMP}" != "E" ]; then
    echo "Detected connection refused"
    echo "Kong isn't running - terminating ${0}"
    echo ""
    exit 1
  fi
  TMP=$(echo ${SERVICE_JSON} | grep 'curl: (6) Could not resolve host:' )
  if [ "E${TMP}" != "E" ]; then
    echo "Detected Could not resolve host error"
    echo "Kong isn't running - terminating ${0}"
    echo ""
    exit 1
  fi
fi

if [ ${SERVICE_EXISTS_IN_KONG} -eq 0 ]; then
  SERVICE_JSON=$(curl -sS --fail -X POST \
                       --url ${KONG_URL}/services/ \
                       --data "name=${SERVICE_NAME}" \
                       --data "protocol=${SERVICE_PROTOCOL}" \
                       --data "host=${SERVICE_HOST}" \
                       --data "port=${SERVICE_PORT}" \
                       --data "path=${SERVICE_PATH}" \
                        2>&1)
  ret=$?
  if [ $ret -ne 0 ]; then
    echo "Create service failed - ${ret}"
    echo "Output: ${SERVICE_JSON}"
    echo ""
    exit 1
  fi
fi


#echo "OUTPUT WAS"
#echo "${CREATE_SERVICE_OUTPUT}"
#echo "END"
#
SERVICE_ID=$(echo ${SERVICE_JSON} | python -c "import sys, json; print json.load(sys.stdin)['id']")
ret=$?
if [ $ret -ne 0 ]; then
  echo "Could not find the service id"
  exit 1
fi
echo " - service id: ${SERVICE_ID}"

ROUTE_LIST_JSON=$(curl -sS --fail -X GET --url ${KONG_URL}/services/${SERVICE_NAME}/routes 2>&1)
RET=$?
if [ ${RET} -ne 0 ]; then
  echo "Query route failed - ${ret}"
  echo "Output: ${ROUTE_LIST_JSON}"
  exit 1
fi

NUMBER_OF_ROUTES=$(echo ${ROUTE_LIST_JSON} | python -c "import sys, json; print len(json.load(sys.stdin)['data'])")
echo " - Service has ${NUMBER_OF_ROUTES} routes"

if [ ${NUMBER_OF_ROUTES} -ne 0 ]; then
  echo "Terminating as service already has routes"
  echo "End of ${0}"
  exit 0
fi

##See https://docs.konghq.com/0.14.x/admin-api/#add-route
CREATE_ROUTE_CMD="curl -sS --fail -X POST \
--url ${KONG_URL}/routes/ \
--data 'paths[]=${ROUTE_PATHS}' \
--data 'hosts[]=${ROUTE_HOSTS}' \
--data 'methods[]=${ROUTE_METHODS}' \
--data 'strip_path[]=${ROUTE_STRIP_PATH}' \
--data 'preserve_host=${ROUTE_PRESERVE_HOST}' \
--data 'service.id=${SERVICE_ID}' \
--data 'protocols[]=${ROUTE_PROTOCOL}' \
"


eval ${CREATE_ROUTE_CMD}
ret=$?
if [ $ret -ne 0 ]; then
  echo "Create route failed - ${ret}"
  echo "Cmd: ${CREATE_ROUTE_CMD}"
  exit 1
fi
echo "Route POST returned ${RET}"

echo "${0} completed sucessfully"

exit 0
